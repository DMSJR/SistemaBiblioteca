{% extends "templates/base.html" %}

{% block content %}

  <div x-data="livroForm()">
    <ol class="breadcrumb mb-2">
      <li class="breadcrumb-item active"></li>
    </ol>
    
    <div class="row">
      <div class="col-12">
         <div class="card">

        <div class="card-header">
          {{title}}
        </div>

        <div class="card-body">
          <div class="m1">
            <form>
              <div class="row">
                <div class="col-md-3">
                  <div class="form-group">
                    <label for="codigo">Código</label>
                    <input type="text" class="form-control" id="codigo" required="required" x-model="form.codigo" x-bind:disabled="disabled">
                  </div>
                </div>

                <div class="col-md-6">
                  <div class="form-group">
                    <label for="titulo">Título</label>
                    <input type="text" class="form-control" id="titulo" x-model="form.titulo" x-bind:disabled="disabled">
                  </div>
                </div>

                <div class="col-md-3">
                  <div class="form-group">
                    <label for="data_publicacao">Data de Publicação</label>
                    <input type="date" class="form-control" id="data_publicacao" x-model="form.data_publicacao" x-bind:disabled="disabled">
                  </div>
                </div>
                
              </div>

              <div class="row">
                <div class="col-md-3">
                  <div class="form-group">
                    <label for="genero">Gênero</label>
                    <input type="text" class="form-control" id="genero" x-model="form.genero" x-bind:disabled="disabled">
                  </div>
                </div>
              

              <div class="col-md-3">
                <div class="form-group">
                  <label for="valor">Valor</label>
                  <input type="number" class="form-control" id="valor" x-model="form.valor" x-bind:disabled="disabled" step="0.01">
                </div>
              </div>
              </div>

              <button type="button" @click="updateForm()" class="btn btn-primary mt-4">Salvar</button>
              <button type="button" @click="deleteForm()" x-show="!disabled" class="btn btn-danger mt-4">Deletar</button>
              <a href="/livro/manutLivro" class="btn btn-info mt-4 ml-2" role="button" aria-disabled="true">Retornar</a>
            </form>

            <div class="mt-3">
              <template x-if="message">
                <div :class="messageClass" x-text="message"></div>
              </template>
            </div>
            </div>
            <!-- Adicionar e Remover Autor -->
            <div class="card mt-4">
              <div class="card-header">
                Gerenciar Autores
              </div>
              <div class="card-body">
                <div class="row">
                  <div class="col-md-8">
                    <div class="form-group">
                      <label for="autor" class="m1">Selecione um Autor</label>
                      <select id="autor" class="form-control" x-model="selectedAutorId" :disabled="!isSaved" x-bind:disabled="disabled">
                        <option value="">Selecione</option>
                        {% for autor in dataAutores %}
                          <option value="{{ autor.autor_id }}">{{ autor.nome }}</option>
                        {% endfor %}
                      </select>
                    </div>
                  </div>
                  <div class="col-md-4 d-flex align-items-end">
                    <button type="button" class="btn btn-success mr-2" @click="addAutor()" :disabled="!isSaved" style="margin-right: 10px;">Adicionar Autor</button>
                    <button type="button" class="btn btn-danger" @click="removeAutor()" :disabled="!isSaved">Remover Autor</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="mt-3">
      <h5>Autores do Livro</h5>
      <ul class="list-group">
        <template x-for="autor in dataAutoresPorLivro" :key="autor.autor_id">
          <li class="list-group-item d-flex justify-content-between align-items-center">
            <span x-text="autor.nome"></span>
          </li>
        </template>
      </ul>
    </div>
  </div>

  <script>
    window.onload = function () {
      windowOnLoad();

      //@ Caso tenha dado erro no servidor frontEnd, ele será mostrado aqui.
      const localErro = "{{erro}}";
      if (localErro != "") {
        alert("[vwLivro|onload] Servidor retornou o erro:" + localErro);
      }
      $("#codigo").focus();
    };

    function livroForm() {
      return {
        form: {
          livro_id: "{{data.livro_id}}",
          codigo: "{{data.codigo}}",
          titulo: "{{data.titulo}}",
          data_publicacao: "{{data.data_publicacao}}",
          genero: "{{data.genero}}",
          valor: "{{data.valor}}",
          deleted: false
        },
        isSaved: true,
        selectedAutorId: '',
        dataAutoresPorLivro: {{ dataAutoresPorLivro | dump | safe }},
        message: '',
        messageClass: '',
        disabled: {{disabled}},

        async updateForm() {
          try {
            const response = await fetch('/livro/UpdateLivro', {
              method: 'POST',
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify(this.form)
            });

            const result = await response.json();
            if (result.status == "ok") {
              alert("Livro atualizado com sucesso");
            } else {
              this.message = `Erro! Não foi possível atualizar os dados do livro devido ao erro: ${result.status}`;
              this.messageClass = 'alert alert-danger';
            }
          } catch (error) {
            this.message = `Erro de conexão: ${error.message}`;
            this.messageClass = 'alert alert-danger';
          }
        },

        async deleteForm() {
          try {
            const response = await fetch('/livro/DeleteLivro', {
              method: 'POST',
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify(this.form)
            });

            const result = await response.json();
            if (result.status == "ok") {
              alert("Livro deletado com sucesso");
              window.location.href = "/livro/manutLivro";
            } else {
              this.message = `Erro! Não foi possível deletar os dados do livro devido ao erro: ${result.status}`;
              this.messageClass = 'alert alert-danger';
            }
          } catch (error) {
            this.message = `Erro de conexão: ${error.message}`;
            this.messageClass = 'alert alert-danger';
          }
        },
        async addAutor() {
          if (!this.selectedAutorId) {
            this.message = "Selecione um autor antes de adicionar.";
            this.messageClass = "alert alert-warning";
            return;
          }

          try {
            const response = await fetch('/livro/addAutor', {
              method: 'POST',
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({livro_id: this.form.livro_id, autor_id: this.selectedAutorId})
            });

            const result = await response.json();

            if (result.status === "ok") {
              this.message = "Autor adicionado com sucesso!";
              this.messageClass = "alert alert-success";
            } else {
              this.message = `Erro: ${result.msg}`;
              this.messageClass = "alert alert-danger";
            }
          } catch (error) {
            this.message = `Erro de conexão: ${error.message}`;
            this.messageClass = "alert alert-danger";
          }
        },

        async removeAutor() {
          if (!this.selectedAutorId) {
            this.message = "Selecione um autor antes de remover.";
            this.messageClass = "alert alert-warning";
            return;
          }

          try {
            const response = await fetch('/livro/deleteAutorDoLivro', {
              method: 'POST',
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({livro_id: this.form.livro_id, autor_id: this.selectedAutorId})
            });

            const result = await response.json();

            if (result.status === "ok") {
              this.message = "Autor removido com sucesso!";
              this.messageClass = "alert alert-success";
            } else {
              this.message = `Erro: ${result.msg}`;
              this.messageClass = "alert alert-danger";
            }
          } catch (error) {
            this.message = `Erro de conexão: ${error.message}`;
            this.messageClass = "alert alert-danger";
          }
        }
      };
    }
  </script>

{% endblock %}